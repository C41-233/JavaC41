<#assign IsFloat = Primitive == 'float' || Primitive == "double">

<#assign Next = "next${Name}">
<#assign Enumerable = "I${Name}Enumerable">
<#assign Enumerator = "I${Name}Enumerator">
<#assign Predicate = "I${Name}Predicate">
<#assign Action = "I${Name}Action">

<#assign ArrayList = "${Name}ArrayList">
<#assign HashSet = "${Name}HashSet">

/*
 * This file is generated by ITEnumerable.java.template
 */
 
package c41.utility.linq;

import java.util.NoSuchElementException;

import c41.lambda.action.*;
import c41.lambda.predicate.*;
import c41.core.assertion.Arguments;
import c41.utility.linq.enumerator.*;
import c41.utility.collection.list.*;
import c41.utility.collection.set.*;

<#if IsFloat>
import c41.utility.algorithm.Maths;
</#if>

/**
 * 基本类型${Primitive}的Enumerable。
 */
public interface ${Enumerable} extends IEnumerable<${Box}>{
	
	@Override
	public ${Enumerator} iterator();
	
	/**
	 * 查询指定下标的值。
	 * @param index 下标
	 * @return 指定值
	 * @throws IllegalArgumentException index &lt; 0
	 * @throws NoSuchElementException 下标超出迭代器范围
	 */
	public default ${Primitive} at(int index){
		Arguments.is(index>=0, "%d < 0", index);
		
		${Enumerator} enumerator = iterator();
		for(int i=0; i<index; i++) {
			if(!enumerator.hasNext()) {
				throw new NoSuchElementException();
			}
			if(!enumerator.hasNext()){
				throw new NoSuchElementException();
			}
			enumerator.${Next}();
		}
		if(enumerator.hasNext()) {
			return enumerator.${Next}();
		}
		throw new NoSuchElementException();
	}
	
	/**
	 * 返回满足条件的元素数量。
	 * @param predicate 谓词
	 * @return 数量
	 */
	public default int countIf(${Predicate} predicate){
		Arguments.isNotNull(predicate);
		
		int count = 0;
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()){
			enumerator.${Next}();
			count++;
		}
		return count;
	}
	
	/**
	 * 获取第一个元素。
	 * @return 第一个元素
	 * @exception NoSuchElementException 如果不存在元素
	 */
	public default ${Primitive} first(){
		${Enumerator} enumerator = iterator();
		return enumerator.next();
	}
	
	/**
	 * 获取第一个重复元素。
	 * @return 第一个重复元素
	 * @exception NoSuchElementException 如果不存在元素
	 */
	public default ${Primitive} firstDuplicate(){
		${HashSet} set = new ${HashSet}();
		
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()){
			${Primitive} value = enumerator.${Next}();
			if(!set.add(value)){
				return value;
			}
		}
		throw new NoSuchElementException();
	}
	
	/**
	 * 返回第一个重复元素。如果不存在，则返回0。
	 * @return 第一个重复元素或0。
	 */
	public default ${Primitive} firstDuplicateOrDefault(){
		return firstDuplicateOrDefault(${Default});
	}
	
	/**
	 * 返回第一个重复元素。如果不存在，则返回默认值。
	 * @param def 默认值
	 * @return 第一个重复元素或默认值。
	 */
	public default ${Primitive} firstDuplicateOrDefault(${Primitive} def){
		${HashSet} set = new ${HashSet}();
		
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()){
			${Primitive} value = enumerator.${Next}();
			if(!set.add(value)){
				return value;
			}
		}
		return def;
	}
	
	/**
	 * 返回第一个满足条件的元素。
	 * @param predicate 谓词
	 * @return 第一个满足的元素
	 * @exception NoSuchElementException 没有满足条件的元素
	 */
	public default ${Primitive} firstIf(${Predicate} predicate){
		Arguments.isNotNull(predicate);
		
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()){
			${Primitive} value = enumerator.${Next}();
			if(predicate.is(value)){
				return value;
			}
		}
		throw new NoSuchElementException();
	}
	
	/**
	 * 返回第一个满足条件的下标。如果不存在，则返回-1。
	 * @param predicate 谓词
	 * @return 下标。
	 */
	public default int firstIndexIf(${Predicate} predicate){
		Arguments.isNotNull(predicate);
		
		${Enumerator} enumerator = iterator();
		int index = 0;
		while(enumerator.hasNext()){
			${Primitive} value = enumerator.${Next}();
			if(predicate.is(value)){
				return index;
			}
			++index;
		}
		return -1;
	}
	
	/**
	 * 返回元素value的下标。如果不存在，则返回-1。
	 * @param value 目标元素
	 * @return 下标
	 */
	public default int firstIndexOf(${Primitive} value){
		${Enumerator} enumerator = iterator();
		int index = 0;
		while(enumerator.hasNext()){
			${Primitive} val = enumerator.${Next}();
			if(val == value){
				return index;
			}
			++index;
		}
		return -1;
	}
	
	<#if IsFloat>
	/**
	 * 返回元素value的下标。如果不存在，则返回-1。
	 * @param value 目标元素
	 * @param epsilon 误差
	 * @return 下标
	 */
	public default int firstIndexOf(${Primitive} value, ${Primitive} epsilon){
		Arguments.is(epsilon >= 0, "epsilon < 0");
	
		${Enumerator} enumerator = iterator();
		int index = 0;
		while(enumerator.hasNext()){
			${Primitive} val = enumerator.${Next}();
			if(Maths.equals(val, value, epsilon)){
				return index;
			}
			++index;
		}
		return -1;
	}
	</#if>
	
	/**
	 * 返回第一个满足条件的元素。如果不存在，则返回0。
	 * @param predicate 谓词
	 * @return 第一个满足条件的元素或0
	 */
	public default ${Primitive} firstOrDefaultIf(${Predicate} predicate){
		return firstOrDefaultIf(predicate, ${Default});
	}
	
	/**
	 * 返回第一个满足条件的元素。如果不存在，则返回默认值。
	 * @param predicate 谓词
	 * @param def 默认值
	 * @return 第一个满足条件的元素或默认值
	 */
	public default ${Primitive} firstOrDefaultIf(${Predicate} predicate, ${Primitive} def){
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()){
			${Primitive} val = enumerator.${Next}();
			if(predicate.is(val)){
				return val;
			}
		}
		return def;
	}
	
	/**
	 * 对每个元素执行操作。
	 * @param action 对每个元素执行的操作
	 * @return 执行的次数
	 */
	public default int foreach(${Action} action) {
		Arguments.isNotNull(action);
		
		${Enumerator} enumerator = iterator();
		int count = 0;
		while(enumerator.hasNext()) {
			action.invoke(enumerator.${Next}());
			count++;
		}
		return count;
	}

	/**
	 * 对每个元素执行操作。
	 * @param action 对每个元素执行的操作，参数包含当前元素及其下标
	 * @return 执行的次数
	 */
	public default int foreach(IForeach${Name}Action action) {
		Arguments.isNotNull(action);
		
		${Enumerator} enumerator = iterator();
		int count = 0;
		while(enumerator.hasNext()) {
			action.invoke(enumerator.${Next}(), count++);
		}
		return count;
	}

	/**
	 * 所有元素都满足谓词。
	 * @param predicate 谓词
	 * @return 如果所有元素都满足谓词，则返回true
	 * @see IReferenceEnumerable#isAll(IPredicate)
	 * @see ICharEnumerable#isAll(ICharPredicate)
	 */
	public default boolean isAll(${Predicate} predicate) {
		Arguments.isNotNull(predicate);
		
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()) {
			${Primitive} val = enumerator.${Next}();
			if(predicate.is(val) == false) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * 存在满足谓词的元素。
	 * @param predicate 谓词
	 * @return 如果存在，则返回true
	 */
	public default boolean isExist(${Predicate} predicate) {
		Arguments.isNotNull(predicate);
		
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()) {
			${Primitive} val = enumerator.${Next}();
			if(predicate.is(val)) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 存在指定值。
	 * @param value 值
	 * @return 如果存在，则返回true
	 */
	public default boolean isExist(${Primitive} value) {
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()) {
			${Primitive} val = enumerator.${Next}();
			if(val == value) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 非所有元素都满足谓词。
	 * @param predicate 谓词
	 * @return 如果非所有元素都满足谓词，返回true
	 */
	public default boolean isNotAll(${Predicate} predicate) {
		Arguments.isNotNull(predicate);
		
		${Enumerator} enumerator = iterator();
		while(enumerator.hasNext()) {
			${Primitive} val = enumerator.${Next}();
			if(predicate.is(val) == false) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 返回所有元素组成的数组。
	 * 如果没有元素，则返回空数组。
	 * @return 数组
	 */
	public default ${Primitive}[] toArray() {
		${ArrayList} list = new ${ArrayList}(this);
		return list.toArray();
	}
	
}